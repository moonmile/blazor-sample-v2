@page "/checksubmit"
@using System.ComponentModel.DataAnnotations

<h3>登録ボタンの制御</h3>

@* Model の結びつけは OnInitialized で行う *@
<EditForm OnValidSubmit="onValidSubmit"
          EditContext="editContext">
    @* 検証を有効にする *@
    <DataAnnotationsValidator />
    @* 検証のエラーメッセージは隠しておく *@
    <ValidationSummary style="@displaySummary" />

    <div class="form-group">
        <label for="zipcode">郵便番号</label>
        <InputText @bind-Value="addressModel.zipCode" class="form-control" />
    </div>
    <div class="form-group">
        <label for="prefecture">都道府県</label>
        <InputSelect id="prefecture" @bind-Value="addressModel.prefecture" class="form-control">
            @foreach (var it in prefectures)
            {
                <option>@it</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="telephone">電話番号</label>
        <InputText id="telephone" @bind-Value="addressModel.telephone" class="form-control" />
    </div>
    <div class="form-group">
        <label for="name">名前</label>
        <InputText id="name" @bind-Value="addressModel.name" class="form-control" />
    </div>
    <div class="form-group">
        <label for="age">年齢</label>
        <InputNumber id="age" @bind-Value="addressModel.age" class="form-control" />
    </div>

    <div class="form-group">
        <div>訪問日</div>
        <div class="form-check form-check-inline">
            <InputCheckbox id="boolvisit" @bind-Value="addressModel.isVisitDate" class="form-check-input" />
            <label class="form-check-label" for="boolvisit">訪問を希望する</label>
        </div>
        <InputDate id="visit" @bind-Value="addressModel.visitDate" class="form-control" />
    </div>

    <button class="btn btn-primary" type="submit"
            disabled="@formInvalid">
        登録
    </button>
    <div style="margin-top:20px">
        @Message
    </div>

</EditForm>

@code {

    public class Address
    {
        [StringLength(7, ErrorMessage = "郵便番号は7桁までです")]
        public string zipCode { get; set; }
        public string prefecture { get; set; }

        // 電話番号と名前を必須にする
        [Required(ErrorMessage = "連絡先は必須です")]
        public string telephone { get; set; }
        [Required(ErrorMessage = "名前を入力してください")]
        public string name { get; set; }

        [Range(10, 100, ErrorMessage = "年齢は10歳から100歳までです")]
        public int age { get; set; }

        public bool isVisitDate { get; set; }
        public DateTime? visitDate { get; set; }
    }

    // 登録ボタンの有効/無効を制御する
    private bool formInvalid = true;
    // EditFormに結びつくコンテンツデータ
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(addressModel);
        editContext.OnFieldChanged += onFieldChanged;
    }
    private void onFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }
    // あらかじめ非表示にしておく
    private string displaySummary = "display:none";

    private Address addressModel = new Address();
    private string Message { get; set; }
    private void onValidSubmit()
    {
        // エラーメッセージを表示する
        displaySummary = "display:block";
        Message = addressModel.name + " さん、登録ありがとうございました";
    }


    private string[] prefectures = new string[] {
        "北海道",
        "青森県",
        "岩手県",
        "宮城県",
        "秋田県",
        "山形県",
        "福島県",
        "茨城県",
        "栃木県",
        "群馬県",
        "埼玉県",
        "千葉県",
        "東京都",
        "神奈川県",
        "新潟県",
        "富山県",
        "石川県",
        "福井県",
        "山梨県",
        "長野県",
        "岐阜県",
        "静岡県",
        "愛知県",
        "三重県",
        "滋賀県",
        "京都府",
        "大阪府",
        "兵庫県",
        "奈良県",
        "和歌山県",
        "鳥取県",
        "島根県",
        "岡山県",
        "広島県",
        "山口県",
        "徳島県",
        "香川県",
        "愛媛県",
        "高知県",
        "福岡県",
        "佐賀県",
        "長崎県",
        "熊本県",
        "大分県",
        "宮崎県",
        "鹿児島県",
        "沖縄県",
    };

}
